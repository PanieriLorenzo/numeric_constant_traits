//! Traits for generic numeric constants
//!
//! Like the traits `Zero` and `One` from the `num` crate, but for all natural
//! numbers up to and including 100. Allows doing generic arithmetic without
//! having to do casts.
//!
//! Without this crate you'd need to do something like:
//! ```ignore
//! 2u8.into() * 3u8.into() + 4u8.into()
//! ```
//! Which is okay, but obfuscates a bit what the intent is.
//!
//! With this crate you can do something like this:
//! ```ignore
//! T::two() * T::three() + T::four()
//! ```
//!
//! The traits are implemented for all standard numeric types, as well as a blanket
//! implementation for `num::Complex<T>`, where `T` is any of the standar numeric
//! types.

pub use num::{Complex, One, Zero};
use paste::paste;

macro_rules! dcl_traits {
    ([$($op:ident),+ $(,)?], $ts:tt, [$($cs:tt),+ $(,)?]) => {
        $(
            paste! {
                #[doc = " Returns the constant value for the number " $op]
                pub trait [<$op:camel>]: Sized {
                    fn $op() -> Self;
                }

                impl<T: [<$op:camel>] + Zero> [<$op:camel>] for Complex<T> {
                    fn $op() -> Self {
                        Complex::new(T::$op(), T::zero())
                    }
                }
            }
            impl_traits!($op, $ts, $cs);
        )+
    };
}

macro_rules! impl_traits {
    ($op:ident, [$($t:ty),+ $(,)?], [$($c:expr),+ $(,)?]) => {
        $(
            paste! {
                impl [<$op:camel>] for $t {
                    fn $op() -> Self {
                        $c
                    }
                }
            }
        )+
    };
}

dcl_traits!(
    [
        two,
        three,
        four,
        five,
        six,
        seven,
        eight,
        nine,
        ten,
        eleven,
        twelve,
        thirteen,
        fourteen,
        fifteen,
        sixteen,
        seventeen,
        eighteen,
        nineteen,
        twenty,
        twenty_one,
        twenty_two,
        twenty_three,
        twenty_four,
        twenty_five,
        twenty_six,
        twenty_seven,
        twenty_eight,
        twenty_nine,
        thirty,
        thirty_one,
        thirty_two,
        thirty_three,
        thirty_four,
        thirty_five,
        thirty_six,
        thirty_seven,
        thirty_eight,
        thirty_nine,
        forty,
        forty_one,
        forty_two,
        forty_three,
        forty_four,
        forty_five,
        forty_six,
        forty_seven,
        forty_eight,
        forty_nine,
        fifty,
        fifty_one,
        fifty_two,
        fifty_three,
        fifty_four,
        fifty_five,
        fifty_six,
        fifty_seven,
        fifty_eight,
        fifty_nine,
        sixty,
        sixty_one,
        sixty_two,
        sixty_three,
        sixty_four,
        sixty_five,
        sixty_six,
        sixty_seven,
        sixty_eight,
        sixty_nine,
        seventy,
        seventy_one,
        seventy_two,
        seventy_three,
        seventy_four,
        seventy_five,
        seventy_six,
        seventy_seven,
        seventy_eight,
        seventy_nine,
        eighty,
        eighty_one,
        eighty_two,
        eighty_three,
        eighty_four,
        eighty_five,
        eighty_six,
        eighty_seven,
        eighty_eight,
        eighty_nine,
        ninety,
        ninety_one,
        ninety_two,
        ninety_three,
        ninety_four,
        ninety_five,
        ninety_six,
        ninety_seven,
        ninety_eight,
        ninety_nine,
        one_hundred
    ],
    [u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize, f32, f64],
    [
        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2.0, 2.0,],
        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3.0, 3.0,],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4.0, 4.0,],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5.0, 5.0,],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6.0, 6.0,],
        [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7.0, 7.0,],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8.0, 8.0,],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9.0, 9.0,],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10.0, 10.0,],
        [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11.0, 11.0,],
        [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12.0, 12.0,],
        [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13.0, 13.0,],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14.0, 14.0,],
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15.0, 15.0,],
        [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16.0, 16.0,],
        [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17.0, 17.0,],
        [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18.0, 18.0,],
        [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19.0, 19.0,],
        [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20.0, 20.0,],
        [21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21.0, 21.0,],
        [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22.0, 22.0,],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23.0, 23.0,],
        [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24.0, 24.0,],
        [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25.0, 25.0,],
        [26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26.0, 26.0,],
        [27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27.0, 27.0,],
        [28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28.0, 28.0,],
        [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29.0, 29.0,],
        [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30.0, 30.0,],
        [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31.0, 31.0,],
        [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32.0, 32.0,],
        [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33.0, 33.0,],
        [34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34.0, 34.0,],
        [35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35.0, 35.0,],
        [36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36.0, 36.0,],
        [37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37.0, 37.0,],
        [38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38.0, 38.0,],
        [39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39.0, 39.0,],
        [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40.0, 40.0,],
        [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41.0, 41.0,],
        [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42.0, 42.0,],
        [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43.0, 43.0,],
        [44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44.0, 44.0,],
        [45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45.0, 45.0,],
        [46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46.0, 46.0,],
        [47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47.0, 47.0,],
        [48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48.0, 48.0,],
        [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49.0, 49.0,],
        [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50.0, 50.0,],
        [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51.0, 51.0,],
        [52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52.0, 52.0,],
        [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53.0, 53.0,],
        [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54.0, 54.0,],
        [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55.0, 55.0,],
        [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56.0, 56.0,],
        [57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57.0, 57.0,],
        [58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58.0, 58.0,],
        [59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59.0, 59.0,],
        [60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60.0, 60.0,],
        [61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61.0, 61.0,],
        [62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62.0, 62.0,],
        [63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63.0, 63.0,],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64.0, 64.0,],
        [65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65.0, 65.0,],
        [66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66.0, 66.0,],
        [67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67.0, 67.0,],
        [68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68.0, 68.0,],
        [69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69.0, 69.0,],
        [70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70.0, 70.0,],
        [71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71.0, 71.0,],
        [72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72.0, 72.0,],
        [73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73.0, 73.0,],
        [74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74.0, 74.0,],
        [75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75.0, 75.0,],
        [76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76.0, 76.0,],
        [77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77.0, 77.0,],
        [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78.0, 78.0,],
        [79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79.0, 79.0,],
        [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80.0, 80.0,],
        [81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81.0, 81.0,],
        [82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82.0, 82.0,],
        [83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83.0, 83.0,],
        [84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84.0, 84.0,],
        [85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85.0, 85.0,],
        [86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86.0, 86.0,],
        [87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87.0, 87.0,],
        [88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88.0, 88.0,],
        [89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89.0, 89.0,],
        [90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90.0, 90.0,],
        [91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91.0, 91.0,],
        [92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92.0, 92.0,],
        [93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93.0, 93.0,],
        [94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94.0, 94.0,],
        [95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95.0, 95.0,],
        [96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96.0, 96.0,],
        [97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97.0, 97.0,],
        [98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98.0, 98.0,],
        [99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99.0, 99.0,],
        [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100.0, 100.0,],
    ]
);

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_sample() {
        assert_eq!(u8::ten(), 10);
        assert_eq!(isize::thirty_three(), 33);
        assert_eq!(f32::one_hundred(), 100.0);
        assert_eq!(Complex::<f32>::forty_two(), Complex::new(42.0, 0.0));
    }
}
